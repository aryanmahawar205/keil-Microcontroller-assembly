ORG 0000H
SJMP START 
	
ORG 0030H
	START: MOV P0,#0FFH // ROW-> OUTPUT(P1)[0]      COL->INPUT(P0)[1]
                        

	// K1 LOOP IS USED TO CHECK WHETHER ANY KEY IS PRESSED OR NOT, IF PRESSED THEN WAIT IN THE LOOP UNTIL RELEASED
	K1: MOV P1,#0   // P1 DECLARED AS OUTPUT
	    MOV A,P0    // THE INPUT OF USER IS TAKEN FROM P0 AND TRANSFERRED IN A
		ANL A,#00001111B // MASKING, BCOZ WE NEED ONLY STARTING 4 PINS VALUE OF P0;
		CJNE A,#00001111B,K1
	
	// K2 LOOP IS USED KI YOU PRESS A KEY AND EXIT TO OVER, ELSE LOOP THERE UNTIL A KEY IS PRESSED
	K2: MOV P1,#0//ROW
		MOV A,P0
		ANL A,#00001111B
		CJNE A,#00001111B,OVER
		SJMP K2
	
	// FIND OUT WHICH IS ROW IS PRESSED BY MAKING EACH ROW LOW TURN BY TURN AND WHAT EFFECT IT HAS ON COLUMN
	OVER: MOV P1,#11111110B
	      MOV A,P0
		  ANL A,#00001111B
		  CJNE A,#00001111B,ROW_0
		  MOV P1,#11111101B
		  MOV A,P0
		  ANL A,#00001111B
		  CJNE A,#0000111B,ROW_1
		  MOV P1,#11111011B
		  MOV A,P0
		  ANL A,#00001111B
		  CJNE A,#0000111B,ROW_2
		  MOV P1,#11110111B
		  MOV A,P0
		  ANL A,#00001111B
		  CJNE A,#0000111B,ROW_3
		  LJMP K2
	
	// HERE WE WILL FIND OUT WHICH COLUMN HAS BEEN PRESSED
	ROW_0: MOV DPTR,#KCODE_0
	       SJMP FIND
    ROW_1: MOV DPTR,#KCODE_1
	       SJMP FIND
    ROW_2: MOV DPTR,#KCODE_2
	       SJMP FIND
    ROW_3: MOV DPTR,#KCODE_3
	       SJMP FIND
    
	FIND: RRC A  //        | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 1 |    |(CY) [values come here] |
	      JNC MATCH //           ->  -> ..................... ->  ^
		  INC DPTR//                                              |
		  SJMP FIND
		  
	MATCH: CLR A
		   MOVC A,@A+DPTR
	       ACALL DATA_WRT
     	   LJMP K1  
		   
    LCD_INITIALIZE: MOV A,#38H
	                ACALL COM_WRT
					ACALL DELAY
					MOV A, #0EH
					ACALL COM_WRT
					ACALL DELAY
					MOV A, #01H
					ACALL COM_WRT
					ACALL DELAY
					MOV A, #06H
					ACALL COM_WRT
					ACALL DELAY
					MOV A, #80H
					ACALL COM_WRT
					ACALL DELAY
					RET
		
	COM_WRT: MOV P2,A
			 CLR P3.7
			 CLR P3.6
			 SETB P3.5
			 ACALL DELAY
			 CLR P3.5
			 RET
			 
	
	DATA_WRT: MOV P2, A
			  SETB P3.7
			  CLR P3.6
			  SETB P3.5
			  ACALL DELAY
			  CLR P3.5
			  RET
			  
	
	DELAY: MOV R4, #255
	HERE: MOV R5, #250
	HERE2: DJNZ R5, HERE2
		   DJNZ R4, HERE
		   RET
		   
	ORG 300H
		KCODE_0: DB 'C', 'D', 'E', 'F'
		
		KCODE_1: DB '8', '9', 'A', 'B'

        KCODE_2: DB '4', '5', '6', '7'

        KCODE_3: DB '0', '1', '2', '3'
			
END